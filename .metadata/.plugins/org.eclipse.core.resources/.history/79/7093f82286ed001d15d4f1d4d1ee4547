package coursework;

import jason.asSyntax.ASSyntax;
import jason.asSyntax.Literal;
import jason.asSyntax.Structure;
import jason.asSyntax.parser.ParseException;
import jason.environment.Environment;

public class MyEnvironment extends Environment {

    @Override
    public void init(String[] args) {

    	String[] agents = {"c2", "tong"};
    	new MyWindow(this, agents);   

 

        try { // defined the location individually for each agent 
        	// has not been added.
        	
            this.addPercept(ASSyntax.parseLiteral("location(waiter, frontdesk)"));
            this.addPercept(ASSyntax.parseLiteral("location(tong, entrance)"));
            this.addPercept(ASSyntax.parseLiteral("location(c2, entrance)"));

            // 加一个设定使其打上busy的标签
            this.addPercept(ASSyntax.parseLiteral("busy(waiter, flase)"));
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean executeAction(String agentName, Structure environmentAction) {
        try {
            String functor = environmentAction.getFunctor();
            if(functor.equals("allocate") && environmentAction.getArity() == 2) {
//            	System.out.println("allocating............");
            	System.out.println("location(" + environmentAction.getTerm(0) + ", " + environmentAction.getTerm(1) + ")");
            	this.addPercept(ASSyntax.parseLiteral("location(" + environmentAction.getTerm(0) + ", " + environmentAction.getTerm(1) + ")"));
            	return true;
            }
            if ( functor.equals("work") && environmentAction.getArity() == 2 ) {
            	Literal locationBefore = ASSyntax.parseLiteral("busy(" + agentName + ", " + environmentAction.getTerm(0) + ")");
//            	System.out.println("busy(" + agentName + ", " + environmentAction.getTerm(0) + ")");
                this.removePercept(locationBefore);
                this.addPercept(ASSyntax.parseLiteral("isbusy(" + agentName + ", " + environmentAction.getTerm(1) + ")"));
                return true;
            }
            if ( functor.equals("free") && environmentAction.getArity() == 2 ) {
            	Literal locationBefore = ASSyntax.parseLiteral("busy(" + agentName + ", " + environmentAction.getTerm(0) + ")");
                this.removePercept(locationBefore);
                this.addPercept(ASSyntax.parseLiteral("isbusy(" + agentName + ", " + environmentAction.getTerm(1) + ")"));
                return true;
            }
            if ( functor.equals("walk") && environmentAction.getArity() == 2 ) {
//                System.out.println("> " + agentName + " is executing environment action " + environmentAction);
                System.out.println(agentName + " is walking from " + environmentAction.getTerm(0) + " to " + environmentAction.getTerm(1));
				  // create a locationBefore using the current location.
                Literal locationBefore = ASSyntax.parseLiteral("location(" + agentName + ", " + environmentAction.getTerm(0) + ")");
                this.removePercept(locationBefore);
                this.addPercept(ASSyntax.parseLiteral("location(" + agentName + ", " + environmentAction.getTerm(1) + ")"));
//                System.out.println("location(" + agentName + ", " + environmentAction.getTerm(1) + ")");
                return true;
            } else {
                System.err.println("> " + agentName + " is attempting to execute unknown environment action " + environmentAction);
                return false;
            }
        } catch (ParseException e) {
            e.printStackTrace();
            return false;
        }
    }

}